{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","views/PhonebookView.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.module.scss","components/Filter/Filter.module.scss","components/ContactList/ContactList.module.scss"],"names":["ContactForm","state","name","number","nameInputId","shortid","generate","numberInputId","handleInput","event","currentTarget","value","setState","reset","sameContact","contactName","contacts","find","toLowerCase","handleSubmit","preventDefault","props","items","onSubmit","alert","this","className","form","label","htmlFor","input","type","pattern","title","required","onChange","id","button","Component","connect","contactsSelectors","getContacts","dispatch","newContact","contactsOperations","addContact","getFilter","changeFilter","target","getFilteredContacts","deleteContact","list","map","item","onClick","PhonebookView","fetchContacts","isLoading","getLoading","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","filter","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.6890d220.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { form, label, input, button } from './ContactForm.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleInput = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  sameContact = (contactName, contacts) => {\r\n    return contacts.find(({ name }) => {\r\n      return name.toLowerCase() === contactName.toLowerCase();\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n\r\n    const { contacts } = this.props;\r\n\r\n    if (this.sameContact(name, contacts.items)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    if (name !== '') {\r\n      this.props.onSubmit({ name, number });\r\n      this.reset();\r\n      return;\r\n    }\r\n    alert('Введите имя контакта');\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className={form} onSubmit={this.handleSubmit}>\r\n        <label className={label} htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleInput}\r\n            id={this.nameInputId}\r\n          ></input>\r\n        </label>\r\n        <label className={label} htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleInput}\r\n            id={this.numberInputId}\r\n          ></input>\r\n        </label>\r\n        <button className={button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: newContact => dispatch(contactsOperations.addContact(newContact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport { label, input } from './Filter.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={label}>\r\n      Find contacts by name\r\n      <input\r\n        className={input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from 'prop-types';\r\nimport { list, item, button } from './ContactList.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <ul className={list}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={item} key={id}>\r\n          <span>\r\n            {name}: {number}\r\n          </span>\r\n          <button\r\n            className={button}\r\n            id={id}\r\n            type=\"button\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\r\n\r\nclass PhonebookView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        {this.props.isLoading && <h1>Загружаются контакты</h1>}\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonebookView);\r\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2bB3M\",\"label\":\"ContactForm_label__rZG8w\",\"input\":\"ContactForm_input__1qHhZ\",\"button\":\"ContactForm_button__2TsDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__175IR\",\"input\":\"Filter_input__2W6DN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__jOGZX\",\"item\":\"ContactList_item__xdOFQ\",\"button\":\"ContactList_button__2R9BK\"};"],"sourceRoot":""}